1. Variables
print and echo do the same.
- ALWAYS end a statement with ; else ERROR.

2. TODO: How to stop display of errors on screen.

3. Always create a sandbox for testing.

4. To quickly display an array: 

<pre>
	<?php var_dump($my_array) ?>
</pre>

OR

<pre>
	<?php echo print_r($my_array) ?>
</pre>

- echo $my_array; will display a notice

5. When required to do operations on an array, search for corresponding function on php.net.

6. loose equality and strict equality: http://stackoverflow.com/questions/80646/how-do-the-php-equality-double-equals-and-identity-triple-equals-comp

7. TIP: If we want to search for a particular function in PHP: lt.php.net/the_function

8. To display special characters on screen use htmlspecialchars.
TIP: Always escape html in links using htmlspecialchars.

9. Sessions are stored on the server to persist user data. 
A cookie is stored in the user browser with a session id. When user makes a request, the session id is sent to the server. The PHP engine validates the session id and subsequently retrieves the data that is associated with this specific session.

First step when working with sessions we must run the session_start() command. 

It is important to run this command before any HTML is echoed out. That's because session_start() sets some headers. We'll get an error if not done as stated. We usually call this function t the very top of the class.

When running session_start() the session id is generated by the server and the cookie set in the client.

When the session has been started, we can set data inside the session: $_SESSION["username"] = "Yovan Juggoo";

We can also retrieve data set in the session (for example in another page).
echo $_SESSION["username"];

Eventually we can explicitly destroy a session for example to clear memory leaks and logout: session_destroy();
All the session data is erased from the disk.

A session is destroyed when we close the browser.

Despite destroying the session, the data is still accessible in the $_SESSION superglobal - to test this we can var_dump($_SESSION) after we have run session_destroy();

It is convenient to set it to an empty array to reinitialize it. $_SESSION = [] or new array();
We must ALSO destroy the cookie created in the browser.

Note: To access the session superglobal in any page we must run the session_start() command.

10. Small Recap
===============
a. Create an index.php page where we set a our username session attribute.
- We must first call the session_start(); method.
- Set the user name session attribute:  $_SESSION["username"] = "Yovan Juggoo".
b. Create an about.php file where we will retrieve the value of our username session attribute. We would also like to destroy the session and resetting the session attributes.
- To access session related values, we must call session_start();
- var_dump($_SESSION["username"]); prints out the value of the user name session attribute.
- session_destroy(); destroys the session.
- $_SESSION = new array(); reintializes the session superglobal.

c. 
- Create a login.php form - HTML.
This is just a login form which submits (posts) to itself. We want to set the user name session attribute
- We write the login HTML code.

- We test whether the user has clicked on the submit button, i.e. whether the form was posted. There are two ways for testing this
	1. By testing whether the $_SERVER["REQUEST_METHOD"] === "POST"

	session_start();
	if($_SERVER["REQUEST_METHOD"] === "POST"]) {
		echo "The form is posted";
	}

	2. As the form has a submit button with a name attribute (name="ok"), we can test whether the button name has been set in the $_POST superglobal.
	if(isset($_POST["ok"])) {
		echo "The form is posted";
	}

	Note: The second way is mostly used when we have more than one form in the page.

- After having tested whether the form was submitted, we must check the entered credentials with the database.
	1. get the input elements value. We must also check whether the $_POST attributes are set.

		session_start();
		if($_SERVER["REQUEST_METHOD"] === "POST") {
			$username = isset($_POST["username"]) ? htmlspecialchars($_POST["username"]) : "";
			$password = isset($_POST["password"]) ? htmlspecialchars($_POST["password"]) : "";
		}
		*** LOGIN HTML form goes here ***

	2. Check these values with the database. Here we will use hardcoded values defined using constants with the define() method.

	session_start();
	define("USER_NAME", "yovan.juggoo@gmail.com");
	define("PASSWORD", "secret");
	if($_SERVER["REQUEST_METHOD"] === "POST") {
			$username = isset($_POST["username"]) ? htmlspecialchars($_POST["username"]) : "";
			$password = isset($_POST["password"]) ? htmlspecialchars($_POST["password"]) : "";

			if($username === USER_NAME && $password === PASSWORD) {
				echo "The user has successfully been logged in.";
			}
	}
	*** LOGIN HTML form goes here ***

- Now we can set the session attributes so that they are accessible throughout the application.
	session_start();
	define("USER_NAME", "yovan.juggoo@gmail.com");
	define("PASSWORD", "secret");

	if($_SERVER["REQUEST_METHOD"] === "POST") {
		$username = isset($_POST["username"]) ? htmlspecialchars($_POST["username"]) : "";
		$password = isset($_POST["password"]) ? htmlspecialchars($_POST["password"]) : "";
		if($username === USER_NAME && $password === PASSWORD) {
			$_SESSION["username"] = $username;
			header("Location: main.php");
		}
	}

	*** LOGIN HTML form goes here ***

- After having set the user name session attribute, we can redirect the user to main.php.
Redirection is done using the header method: header("Location: main.php");
In main.php we can print out a friendly message.
	But we must test whether the user name session attribute has been set. Otherwise we are redirected to the login page. We should also die() so that nothing is executed after.
	<?php 
		session_start();
		if(!isset($_SESSION["username"]))
			header("Location: login.php");
			die();
	?>
	<!DOCTYPE html>
	<html lang="en">
	<head>
		<meta charset="UTF-8">
		<title>Main Page</title>
	</head>
	<body>
		<div>
			<p>Welcome <? php echo $_SESSION["username"] ?></p>
		</div>
	</body>
	</html>

- We will create a logout page, where the user will be redirected back to the login page, after the session has been destroyed, session attributes resetted and the session relative cookies destroyed.
	<?php  
		session_start();
		session_destroy();
		$_SESSION = [];
		//delete cookie in another course
		header("Location: login.php");
	?>

- If the user enters invalid credentials, we would like to show the invalid credentials message on screen.
	if($username === USER_NAME && $password === PASSWORD) {
		//set user name session attribute
		//redirect to main.php
	} else {
		$status = "Invalid credentials";
	}

	In the HTML we can echo the message:
	<?php if(isset($status)) :?>
		<div class="message">
			<p><?php echo $status ?></p>
		</div>
	<?php endif; ?>

Sessions refactoring
======================
1. As seen previously, we had a login page which contains a login form submitting to itself. If the form is posted, and the entered credentials are correct (hardcoded credentials are defined as constants), we are redirected to the main page, after the username session attribute is set. 
Note this session attribute is saved on the server, but a cookie is set in the browser (PHPSESSIONID: mv0muubc4tjp219qq6cgrhn0j1).
In the page page we have a logout button which redirects the user to the logout.php page where the session is destroyed and the $_SESSION superglobal is reset. We are then redirected to the login page. Now we want to refactor our code.

2. In the main.php file, we can see that if the $_SESSION["username"] session variable is not set, we are redirected to the login page using header("Location: login.php");
The code is as follows:
<?php
	session_start();
	if(!isset($_SESSION["username"])) {
		header("Location: login.php");
		die();
	}
?>
*** Main Page HTML goes here ***

As we will be using the isset($_SESSION("username")) check in several parts of our app, it will be a good practice to extract it into a function. We hence create a functions file.
<?php
	function is_logged_in() {
		return isset($_SESSION["username"]);
	}

3. We can also refactor our login page.

We can create a config.php file where we can define constants that our application will use. For example our hardcoded credentials, BASE_URL or database connection URL.
<?php
	define("USER_NAME", "yovan.juggoo@gmail.com");
	define("PASSWORD", "1234")

4. We then abstract the user authentication mechanism of our login.php file into the is_valid_user($username, $password) function and hence we should include the functions.php.

Cookies
=========
Cookies can store up to 4kb of data. They are easily editted so we must not store sensible data inside them.
Casual user data can be stored in them, like fonts preferences, user preferred categories etc.

We create a cookie by using the setcookie(string $name [,string $value [, int $expire[, ....]]]) method.

This method can take a lot of parameters - see reference on web.

- The name parameter is the key of the cookie
- the value is the value of the cookie
- expire - the expiration date. If not specified, it uses the browser's session as the expiration date.
etc...
<?php
	setcookie("fontSize", 16);
If we run the code and inspect elements in Application/Cookies we can see that we successfully set the value of our cookie.

Note: We don't have access right away to our cookie variable, despite the fact that we have defined it. 
To test it we can delete the cookie and reset it.
The code below will notify an error:
<? php
setcookie("fontSize", 16);
echo $_COOKIE["fontSize"]; //This line will throw an error: Notice: Undefined index: fontSize in C:\wamp\www\tuts_intro_php\02_super_globals\005-cookies\cookies.php on line 3

This is because when we first set the cookie, it has not yet been sent to the server, hence accessessing it will throw an error.
If we reload our page, the cookie is sent to the server, and when it comes back the value is set in the $_COOKIE superglobal and hence the echo works.

We can use the value of the fontSize cookie variable to style our HTML.

In DevTools we can see that the lifetime of our cookie is set to Session, i.e the session of the browser.

setcookie($name, $value, $expiration_date_in_seconds); For example to define a cookie expiring in a year as from now, we must add the current time to the number of seconds in a year:
setcookie("fontSize", 25, time() + 60 * 60 * 24 * 365); 

There are no methods to delete a cookie. To delete a cookie, we set the expiration time in the past.
setcookie("fontSize", 25, time() - (60 * 30)); // If we run this code, we can see in DevTools that the cookie is no longer there.

We can access our cookie as an array. For example if we want to set user preferences, we can define and access the preferences as an array:
setcookie("pref[fontSize]", 25);
setcookie("pref[favoriteCategory]", 25);
setcookie("pref[screenWidth]", 25);










